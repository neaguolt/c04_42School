Exercise 00 : ft_strlen


Turn-in directory : ex00/
Files to turn in : ft_strlen.c
Allowed functions : None

â€¢ Create a function that counts and returns the number of characters in a string.
â€¢ Hereâ€™s how it should be prototyped :

int ft_strlen(char *str);


Exercise 01 : ft_putstr


Turn-in directory : ex01/
Files to turn in : ft_putstr.c
Allowed functions : write

â€¢ Create a function that displays a string of characters on the standard output.
â€¢ Hereâ€™s how it should be prototyped :

void ft_putstr(char *str);


Exercise 02 : ft_putnbr


Turn-in directory : ex02/
Files to turn in : ft_putnbr.c
Allowed functions : write

â€¢ Create a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.
â€¢ Hereâ€™s how it should be prototyped :

void ft_putnbr(int nb);

â€¢ For example:
 ft_putnbr(42) displays "42".


Exercise 03 : ft_atoi
Exercise 03
ft_atoi
Turn-in directory : ex03/
Files to turn in : ft_atoi.c
Allowed functions : None
â€¢ Write a function that converts the initial portion of the string pointed by str to its int
representation
â€¢ The string can start with an arbitray amount of white space (as determined by isspace(3))
â€¢ The string can be followed by an arbitrary amount of + and - signs, - sign will change
the sign of the int returned based on the number of - is odd or even.
â€¢ Finally the string can be followed by any numbers of the base 10.
â€¢ Your function should read the string until the string stop following the rules and return
the number found until now.
â€¢ You should not take care of overflow or underflow. result can be undefined in that case.
â€¢ Hereâ€™s an example of a program that prints the atoi return value:
$>./a.out " ---+--+1234ab567"
-1234
â€¢ Hereâ€™s how it should be prototyped :
int ft_atoi(char *str);
9
Chapter VII
Exercise 04 : ft_putnbr_base
Exercise 04
ft_putnbr_base
Turn-in directory : ex04/
Files to turn in : ft_putnbr_base.c
Allowed functions : write
â€¢ Create a function that displays a number in a base system in the terminal.
â€¢ This number is given in the shape of an int, and the radix in the shape of a string
of characters.
â€¢ The base-system contains all useable symbols to display that number :
 0123456789 is the commonly used base system to represent decimal numbers
 01 is a binary base system ;
 0123456789ABCDEF an hexadecimal base system ;
 poneyvif is an octal base system.
â€¢ The function must handle negative numbers.
â€¢ If thereâ€™s an invalid argument, nothing should be displayed. Examples of invalid
arguments :
 base is empty or size of 1;
 base contains the same character twice ;
 base contains + or - ;
â€¢ Hereâ€™s how it should be prototyped :
10
C Piscine C 04
void ft_putnbr_base(int nbr, char *base);
11
Chapter VIII
Exercise 05 : ft_atoi_base
Exercise 05
ft_atoi_base
Turn-in directory : ex05/
Files to turn in : ft_atoi_base.c
Allowed functions : None
â€¢ Write a function that converts the initial portion of the string pointed by str to int
representation.
â€¢ str is in a specific base given as a second parameter.
â€¢ excepted the base rule, the function should work exactly like ft_atoi.
â€¢ If thereâ€™s an invalid argument, the function should return 0. Examples of invalid
arguments :
 base is empty or size of 1;
 base contains the same character twice ;
 base contains + or - or whitespaces;
â€¢ Hereâ€™s how it should be prototyped :
int ft_atoi_base(char *str, char *base);
12
